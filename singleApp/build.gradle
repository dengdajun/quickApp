import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-java-application'
apply plugin: 'com.bmuschko.docker-remote-api'

group 'com.believe.single'

jar {
    baseName = 'singleApp'
    version = '1.0'
}

bootRun {
    addResources = true
}

def appPort = 8080
def dockerServerUrl = 'https://192.168.1.121:2376'
def certDir = 'server01/cert'

def appContainerName = 'server01_singleApp'
def public_port = [appPort + ':' + appPort]
def environment = ['JAVA_OPTS=-server -Xmx512M -Xms512M', 'SINGLE_APP_OPTS=-Dspring.profiles.active=prod']

docker {
    url = dockerServerUrl
    certPath = new File(System.properties['user.home'], certDir)

    registryCredentials {
        url = 'https://index.docker.io/v1/'
        username = 'sky233'
        password = 'pwd11'
        email = 'lixingping233@gmail.com'
    }

    javaApplication {
        baseImage = 'frolvlad/alpine-oraclejdk8:slim'
        maintainer = 'Li xp.'
        ports = [appPort]
        tag = 'single-app:latest'
        exec {
            entryPoint '/singleApp/bin/singleApp'
        }
    }
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from 'frolvlad/alpine-oraclejdk8:slim'
    maintainer '"Li xp."'
    volume '/tmp'
    addFile 'singleApp.tar ', '/'
    exposePort appPort
    entryPoint '/singleApp/bin/singleApp'
}

task createAppContainer(type: DockerCreateContainer) {
    dependsOn dockerBuildImage
    targetImageId { dockerBuildImage.getImageId() }
    containerName = appContainerName
    portBindings = public_port
    env = environment
}

task startAppContainer(type: DockerStartContainer) {
    dependsOn createAppContainer
    targetContainerId { createAppContainer.getContainerId() }
}

task stopAppContainer(type: DockerStopContainer) {
    targetContainerId { createAppContainer.getContainerId() }
}

task removeContainer(type: DockerRemoveContainer) {
    targetContainerId { createAppContainer.getContainerId() }
    onError { exception ->
        if (!exception.message.contains('No such container')) // ignore exception if container does not exist otherwise throw it
            throw exception
    }
}

task functionalTestApp(type: Test) {
    dependsOn startAppContainer
    finalizedBy stopAppContainer
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'com.google.guava:guava:21.0'
    compile 'org.apache.httpcomponents:httpclient:4.5.3'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}


